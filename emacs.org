#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle (haris/tangle-home ".emacs.d/haris/default.el") :mkdirp yes :noweb yes :results silent
#+begin_src emacs-lisp :exports none
  ;; -*- mode: emacs-lisp; -*- vim: ft=lisp sw=2
#+end_src

Emacs is a very versatile tool. I use it as:
- a text editor (of course)
- a [[*Email][mail client]] (mu4e)
- an [[*ERC][IRC chat client]] (ERC)
- a [[*Git][git GUI]] (magit)
- a multilingual [[*Programming languages][IDE for quick and simple work]]
- a [[*Vterm][special-purpose terminal emulator]] (vterm)
- for [[*Org mode][note-taking and organization]] (org-mode)
- as a [[*Comint][superior interface for many interpreters]] (comint)

What's more, I'm using a distribution of Emacs called Spacemacs, which comes
with many sensible defaults and simplifies the installation and setup of
packages. Because it is so feature-rich, Emacs can take an annoying time to
start up. That's why I have set up a systemd service that runs an emacs daemon
on system startup. When I want to launch emacs to perform a task, I run [[file:~/.haris/scripts.org::*=myemacs=][myemacs]]
(a custom command that wraps [[man:emacsclient][emacsclient]]), which attaches to the daemon, without
the need to load the cruft each time.

** Daemons
For some of those use cases I mentioned above, I want to run a standalone emacs
daemon, specialized for that use case. One reason is that emacs is
single-threaded, so a hang-up in one application would render the rest of the
daemon unresponsive. Another reason is simply to have a cleaner buffer list, so
I can use =ibuffer= more efficiently.

Here's a list of standalone daemons I have configured. Each one has a systemd
service configured and thus launches on system startup. For each entry the
daemon name is shown (as passed to the =--socket-name= option). Each daemon has
its own configuration file (see [[* Configuration loading][Configuration loading]]) to prevent loading of
unnecessary code.

- =irc= :: Used as an IRC chat client
  - Configuration file :: =~/.emacs.d/haris/irc.el=

  #+begin_src conf :tangle no
    <<irc.service>>
  #+end_src

- =ide= :: Used as a multilingual IDE via the lsp protocol

  *NOTE*: The functionality for this daemon is not yet configured.
- =emacs= :: Everything else is done through this daemon. This includes basic text
  editing and applications that don't warrant a standalone daemon.
  - Configuration file :: =~/.emacs.d/default.el=

  #+begin_src conf :tangle no
    <<emacs.service>>
  #+end_src

  #+NAME: emacs.service
  #+begin_src conf :tangle (haris/tangle-home ".config/systemd/user/emacs.service") :exports none
    [Unit]
    Description=Emacs text editor
    Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

    [Service]
    Type=forking
    ExecStart=/usr/bin/emacs --daemon="emacs"
    ExecStop=/usr/bin/emacsclient --socket-name="emacs" --eval "(kill-emacs)"
    Restart=on-failure

    [Install]
    WantedBy=default.target
  #+end_src

  *TODO*: It is planned that this config file be used, but it's not yet implemented.

*** TODO Configuration loading
The main generated user configuration file is [[~/.emacs.d/haris/root.el]]. This
file is loaded by spacemacs and internally, it loads the other files based on
the type of the purpose of the current emacs daemon (by reading the
=server-name= variable). This is the config file:
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/root.el")
  (load-file (cond ((and (boundp 'server-name) (equal server-name "irc"))
                    "~/.emacs.d/haris/irc.el")
                   ("~/.emacs.d/haris/default.el")))
#+end_src
* General settings
#+NAME: basic-settings
#+begin_src emacs-lisp
  (setq fill-column 80)
  (spacemacs/toggle-visual-line-navigation-globally-on)
  (global-auto-revert-mode t)
  (setq default-tab-width 4)
  (setq browse-url-generic-program (executable-find "firefox"))
  (setq image-auto-resize 'fit-width)
  (setq image-auto-resize-on-window-resize t)
  (setq evil-want-keybinding nil)
  (setq mouse-wheel-scroll-amount '(6))
  (setq dotspacemacs-search-tools '("rg" "grep"))
  (setq uniquify-buffer-name-style 'forward)
  (setq frame-title-format "%b"
        dotspacemacs-frame-title-format nil)

  ;; Handle URLs as files
  (url-handler-mode)

  ;; Scrolling
  (pixel-scroll-precision-mode)
  (setq scroll-bar-mode-explicit nil)

  (add-to-list 'exec-path (expand-file-name "~/.local/bin"))
  (if (not (boundp 'haris/prepended-path))
      (progn
        (setq haris/prepended-path "yes")
        (setenv "PATH" (concat (expand-file-name "~/.local/bin") ":" (getenv "PATH")))))

  ;; TODO whatever this does
  (add-hook 'text-mode-hook #'auto-fill-mode)
  (add-hook 'prog-mode-hook #'auto-fill-mode)

  ;; Init and set theme
  (setq custom-theme-directory "~/.emacs.d/private/themes")
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (select-frame frame)
              (load-theme 'dracula t)))
  (load-theme 'dracula t)

  ;; Ways to spawn shells from within Emacs
  (setq shell-default-shell 'shell)
  (setq terminal-here-linux-terminal-command '("alacritty")
        terminal-here-mac-terminal-command   '("alacritty"))
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<basic-settings>>
#+end_src
** Package bootstrapping
#+NAME: package-init
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (setq use-package-always-ensure t)

  (require 'use-package)
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<package-init>>
#+end_src
** Global packages
#+begin_src emacs-lisp
  (use-package focus-autosave-mode :defer t)
  (use-package multi-vterm :defer t)
  (use-package command-log-mode)
#+end_src
*** Language modes
#+begin_src emacs-lisp
  (use-package json-mode :defer t)
  (use-package fish-mode :defer t)
  (use-package vimrc-mode :defer t)
  (use-package sxhkdrc-mode :defer t)
  (use-package i3wm-config-mode :defer t)
  (use-package git-modes :defer t)
  (use-package systemd :defer t)
#+end_src
** Functions
#+begin_src emacs-lisp
  (defun haris/stage () (interactive) (mkdir "/tmp/stage" t) (dired "/tmp/stage"))
#+end_src
** Avy
*** Try to make evil-easymotion work bidirectionally
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "M-w") 'avy-goto-word-0)
  (define-key evil-normal-state-map (kbd "M-f") 'avy-goto-char)
#+end_src
** Interactive commands                                               :blah:
These are commands that I primarily intend to use interactively and directly,
without binding them to any keys.
*** Commands from local shell scripts
All commands defined in [[file:scripts.org][./scripts.org]] are taken and loaded as equivalent Elisp
interactive commands. Each command is mapped to a function named
=haris/script/<script-name-from-scripts.org>=. When this interactive command is
run, it opens a vterm buffer named based on the command name, and runs the
command there (without any arguments).
#+begin_src elisp
  (defun haris/load-commands-from-local-shell-scripts ()
    "Load all local shell script commands as interactive Elisp commands."
    (interactive)
    (with-temp-buffer
      (org-mode)
      (setq-local org-use-tag-inheritance nil)
      (insert-file-contents "~/.haris/scripts.org")

      ;; Extract all applicable script commands
      (setq-local
       _commands
       (org-map-entries
        (lambda () (let ((title (nth 4 (org-heading-components))))
                     (string-replace "=" "" title)))
        "script" nil))

      ;; Create an interactive function definition for each command
      (mapcar
       (lambda (command)
         (eval
          `(defun ,(intern (format "haris/script/%s" command))
               ;; Arglist
               (prefix-arg)
             ;; Docstring
             ,(format "Interactive command corresponding to the custom local shell script '%s'" command)
             (interactive "P")
             (let ((command ,command)
                   (_vterm nil)
                   (run-command nil))
               ;; Run multi-vterm
               (setq _vterm (multi-vterm))
               (with-current-buffer _vterm
                 ;; Rename the buffer based on the command name
                 (rename-buffer (format "*%s*" command) t)
                 (setq run-command
                       (eval `(lambda (&optional argstring)
                                (interactive ,(format "sCLI arguments: %s " ,command))
                                "Run the command inside the open vterm buffer"
                                (comint-send-string
                                 (get-buffer-process ,_vterm)
                                 (format "%s %s\n" ,command (or argstring ""))))))
                 ;; Run the command
                 (if prefix-arg
                     ;; With prefix arg - prompt for CLI arguments before running
                     (call-interactively run-command)
                   ;; No prefix arg - run without CLI arguments
                   (run-with-timer 0.6 nil (eval `(lambda () (funcall ,run-command))))))))))
       _commands)))

  (haris/load-commands-from-local-shell-scripts)
#+end_src
** Bindings
#+begin_src emacs-lisp
  ;; M-TAB in insert mode inserts a tab and converts it to a space
  (defun haris/insert-tab-as-spaces () (interactive)
         (insert "\t")
         (untabify
          (line-beginning-position)
          (line-end-position)))

  (defun haris/popup-eshell () (interactive)
         (let ((shell-default-shell 'eshell))
           (spacemacs/default-pop-shell)) )

  (defun haris/describe-symbol-at-point ()
    (interactive)
    (let ((was-in-minibuffer (minibufferp))
          (original-buffer (current-buffer)))
      (helpful-symbol (helpful--symbol-at-point))
      (when was-in-minibuffer (switch-to-buffer original-buffer))))

  ;; M-TAB in insert mode inserts a tab emulated by spaces
  (define-key evil-insert-state-map (kbd "M-TAB") 'haris/insert-tab-as-spaces)
  ;; "SPC +" will pop up eshell
  (spacemacs/set-leader-keys "+" 'haris/popup-eshell)

  ;; Don't use it, plus it interferes with bindings such as forward-button
  (eval-after-load "helpful"
    (lambda ()
      (define-key evil-normal-state-map (kbd "TAB") nil)))

  ;; Help bindings
  (spacemacs/set-leader-keys "hdo" 'helpful-symbol)

  (evil-define-key 'normal org-mode-map        (kbd "C-q")
    'haris/describe-symbol-at-point)
  (evil-define-key 'normal emacs-lisp-mode-map (kbd "C-q")
    'haris/describe-symbol-at-point)
  (evil-define-key 'normal ielm-map            (kbd "C-q")
    'haris/describe-symbol-at-point)
  (evil-define-key 'normal read--expression-map (kbd "C-q")
    'haris/describe-symbol-at-point)
#+end_src
#+begin_src emacs-lisp
  (spacemacs/declare-prefix "o" "custom")
#+end_src
*** Launching other programs at current context
Note: there is also spacemacs' builtin =SPC "= that opens a terminal in-place.
#+begin_src emacs-lisp
  (global-set-key
   (kbd "M-e")
   (lambda () (interactive)
     (start-process "" nil "emacs" "-c" (buffer-file-name (window-buffer)))))
  (global-set-key
   (kbd "M-v")
   (lambda () (interactive)
     (start-process "" nil "gvim" (buffer-file-name (window-buffer)))))
#+end_src
*** Spacemacs-like bindings
#+NAME: spacemacs-like-bindings
#+begin_src emacs-lisp
  (defun haris/open-emacs.org ()
    (interactive)
    (find-file "~/.haris/emacs.org"))

  (defun haris/load-user-config ()
    (interactive)
    (load-file "~/.emacs.d/haris/root.el"))

  (define-key evil-normal-state-map (kbd "SPC f e h") #'haris/open-emacs.org)
  (define-key evil-normal-state-map (kbd "SPC f e r") #'haris/load-user-config)
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<spacemacs-like-bindings>>
#+end_src
*** Consistent vim-like bindings
There are some inconsistencies in the vim key bindings (vim is guilty of this as
well). For example =D= deletes until end of line, but =V= visually selects the whole
line. This section remaps =V= to =v$= and does the same for other similar cases.
Some custom keybindings are defined here as well.

#+NAME: consistent-vim-bindings
#+begin_src emacs-lisp
  (setq evil-collection-setup-minibuffer t)
  (evil-collection-init 'minibuffer)

  (define-key evil-normal-state-map (kbd "Q")     'delete-window)
  (define-key evil-motion-state-map (kbd "Q")     'delete-window)

  (define-key evil-visual-state-map (kbd "v")     'evil-visual-line)
  (define-key evil-normal-state-map (kbd "V")     (kbd "v$"))
  (setq evil-want-Y-yank-to-eol t)

  (define-key evil-normal-state-map (kbd "C-a")   'evil-numbers/inc-at-pt)
  (define-key evil-visual-state-map (kbd "C-a")   'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-x")   'evil-numbers/dec-at-pt)
  (define-key evil-visual-state-map (kbd "C-x")   'evil-numbers/dec-at-pt)

  (defun haris/nohighlight () (interactive)       (evil-ex-call-command "" "noh" ""))
  (define-key evil-normal-state-map (kbd "M-/")   'haris/nohighlight)
  (define-key evil-motion-state-map (kbd "M-/")   'haris/nohighlight)

  (define-key input-decode-map "\C-i" [C-i])
  (define-key evil-normal-state-map (kbd "C-i") 'evil-jump-forward)
  (define-key evil-visual-state-map (kbd "C-i") 'evil-jump-forward)
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<consistent-vim-bindings>>
#+end_src
*** Ielm
#+NAME: ielm
#+begin_src emacs-lisp
  ;; Use RET to execute command even in normal mode
  (evil-define-key 'normal ielm-map (kbd "RET") 'ielm-return)
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<ielm>>
#+end_src
*** Custom global map
#+NAME: custom-global-map
#+begin_src emacs-lisp
  ;; Buffer map
  (setq haris/buffer-prefix-map (make-sparse-keymap))
  (spacemacs/set-leader-keys "ob" haris/buffer-prefix-map)
  (define-key haris/buffer-prefix-map (kbd "r") #'rename-buffer)
  (define-key haris/buffer-prefix-map (kbd "c") #'clone-buffer)
  (define-key haris/buffer-prefix-map (kbd "i") #'ibuffer)

  ;; Command log mode
  (setq haris/command-log-prefix-map (make-sparse-keymap))
  (spacemacs/set-leader-keys "oc" haris/command-log-prefix-map)
  (define-key haris/command-log-prefix-map (kbd "l") #'haris/command-log)

  ;; Friendly descriptions
  (which-key-add-key-based-replacements
    "SPC o b" "Buffer manipulation"
    "SPC o c" "Command log"
    "SPC o c l" "Local command log")
#+end_src
#+begin_src elisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el")
  <<custom-global-map>>
#+end_src
*** Miscellaneous
#+NAME: bindings-miscellaneous
#+begin_src emacs-lisp
  ;; Use RET to execute command even in normal mode
  (evil-define-key 'normal ielm-map (kbd "RET") 'ielm-return)

  ;; Use M-y or M-n to answer a minibuffer prompt
  (defun haris/insert-into-minibuffer-and-exit (text)
    (interactive)
    (with-current-buffer (window-buffer (active-minibuffer-window))
      (insert text)
      (exit-minibuffer)))

  (global-set-key (kbd "M-y")
                  (lambda ()
                    (interactive)
                    (haris/insert-into-minibuffer-and-exit "y")))
  (global-set-key (kbd "M-n")
                  (lambda ()
                    (interactive)
                    (haris/insert-into-minibuffer-and-exit "n")))

  (define-key comint-mode-map (kbd "M-h") (lambda ()
                                            "Search through current history"
                                            (interactive)
                                            (counsel-shell-history)))
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<bindings-miscellaneous>>
#+end_src
** Vim-like configuration
#+begin_src emacs-lisp
  (use-package evil-quickscope)
  (global-evil-quickscope-always-mode)
#+end_src
* Ivy
#+NAME: ivy
#+begin_src emacs-lisp
  (evil-collection-init 'ivy)
  (setq ivy-initial-inputs-alist ())

  (define-key ivy-minibuffer-map (kbd "TAB") #'ivy-insert-current)
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<ivy>>
#+end_src
* Org mode
** Packages
#+begin_src emacs-lisp
  (eval-after-load "org"
    (lambda ()
      (use-package org-transclusion :defer t)
      (use-package org-preview-html :defer t)
      (use-package org-drill        :defer t)
      (use-package ob-restclient)
      (use-package ol-man :ensure nil)
      (use-package org-tempo :ensure nil)))
#+end_src
** Basic config
#+begin_src emacs-lisp
  (defun haris/org-mode-visual-fill ()
    (setq visual-fill-column-width        90
          visual-fill-column-center-text  t)
    (visual-fill-column-mode 1))

  (defun haris/org-babel-goto-tangle-file ()
    "Go to the file that the code block at point tangles to. If there is an
  interactive prefix argument, open the final destination (production) file."
    (let ((file (if current-prefix-arg
                    (haris/extract-tangle-final-dest)
                  (haris/extract-tangle-dest))))
      (when file (find-file file))))

  (add-hook 'org-mode-hook 'org-appear-mode)
  (add-hook 'org-mode-hook 'haris/org-mode-visual-fill)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'org-transclusion-add-all)
  (add-hook 'org-open-at-point-functions 'haris/org-babel-goto-tangle-file)

  ;; Prettiness
  (setq org-indent-mode                     t
        org-M-RET-may-split-line            nil
        org-ellipsis                        " ▾"
        org-superstar-headline-bullets-list '("◉" "○" "■" "◆")
        org-hide-emphasis-markers           t
        org-pretty-entities                 t
        org-appear-autoentities             t
        org-appear-autolinks                nil)

  ;; Misc variables
  (setq org-download-screenshot-method      "flameshot gui --path screenshots/%s"
        org-projectile-file                 "TODO.org"
        org-projectile-per-project-filepath "TODO.org")

  (add-to-list 'org-file-apps '("\\.x?html?\\'" . "firefox %s"))
  (add-to-list 'org-export-backends 'md)
#+end_src
** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files (append '("~/data/personal/todo.org"
                                   "~/data/personal/wiki/")
                                 (file-expand-wildcards "~/proj/*/*.org")
                                 (file-expand-wildcards "~/proj/drytoe/*/*.org")))
#+end_src
** TODO Syntax extensions
Doesn't get loaded correctly.
#+begin_src emacs-lisp :tangle no
  (use-package org-special-block-extras
    :ensure t
    :hook (org-mode . org-special-block-extras-mode))
#+end_src
** org-alert
Takes too long to load.
#+begin_src emacs-lisp :tangle no
  (use-package org-alert :defer t)
#+end_src
** Block templates
#+begin_src emacs-lisp
  (setq org-structure-template-alist
        (cl-remove-duplicates
         (append (default-value 'org-structure-template-alist)
                 '(("el"   . "src elisp")
                   ("sh"   . "src shell")
                   ("py"   . "src python")
                   ("dep"  . "src shell :tangle (haris/tangle-deps \"TODO\")")
                   ("sht"  . "src shell :tangle (haris/tangle-home \"TODO\")")
                   ("elt"  . "src elisp :tangle (haris/tangle-home \"TODO\")")
                   ("st"   . "src :tangle (haris/tangle-home \"TODO\")")
                   ("rest" . "src restclient")))
         :test (lambda (a b) (string= (car a) (car b)))))
#+end_src
** Babel
I tangle my configs from various org files into their respective destination
files. But, sometimes I perform a tangle without wanting to overwrite my live
configuration. One reason for this is that I have a (WIP) github workflow that I
use to generate the configs from my org files. That is why code blocks in my
literal configs use temporary "staging" destinations. So, whenever I run
=(org-babel-tangle)=, the files are output into =/tmp/tangle-<username>= or
=/tmp/dependencies-<username>= (varies by code block). Then, if I want to apply
those files to my live config under =~/=, I can call =(haris/tangle-dest)=.
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((shell      . t)
                                 (C          . t)
                                 (python     . t)
                                 (restclient . t)
                                 (verb . t)))

  ;; This variable is by default unbound, and so causes an error whenever a code
  ;; block with ':session' is evaluated
  (setq org-babel-prompt-command "")

  (defun haris/tangle-dest (&optional prefix-arg)
    "Tangle block(s) to their final destinations. If a code block file have the
  temporary staging destination as their :tangle argument, they will be tangled to
  the production destination under ~/ as well."
    (interactive "P")
    (let ((tangle-home (haris/tangle-home)))
      (delete-directory tangle-home t)
      (org-transclusion-add-all)
      (org-babel-tangle prefix-arg)
      (shell-command (concat "rsync -ru " tangle-home " ~/"))))

  (evil-define-key 'normal org-mode-map (kbd ",bT") 'haris/tangle-dest)
#+end_src
There are a few custom functions I define for tangling that are in a separate
file, so that file can be used as a minimalistic source for boostrapping.
#+begin_src emacs-lisp
  (load-file "~/.haris/bootstrap/tangle.el")
#+end_src
*** Utility functions
#+begin_src elisp
  (defun haris/extract-tangle-dest ()
    "Extract the tangle destination from the code block under point."
    (let* ((args (nth 2 (org-babel-get-src-block-info)))
           (tangle-arg (alist-get :tangle args)))
      (if (and tangle-arg (not (string= "no" tangle-arg)))
          tangle-arg)))

  (defun haris/extract-tangle-final-dest ()
    "Extract the tangle destination of the current code block. If the destination
  is defined in terms of (haris/tangle-home), then the final destination under
  ~/ is returned."
    (let* ((dest (haris/extract-tangle-dest)))
      (if dest
          (let* ((home-dir-re (concat "^" (regexp-quote (haris/tangle-home))))
                 (deps-dir-re (concat "^" (regexp-quote (haris/tangle-deps ""))))
                 (_file (replace-regexp-in-string home-dir-re "~/" dest)))
            (replace-regexp-in-string deps-dir-re "~/" _file))
        nil)))
#+end_src
** LaTeX preview
#+begin_src emacs-lisp
  (setq org-preview-latex-default-process        'dvisvgm)
  (setq org-latex-create-formula-image-program   'dvisvgm)
  (setq org-preview-latex-image-directory        "/tmp/org-mode/ltximg/")
  (setq org-image-actual-width 400)
#+end_src
** Verb
#+begin_src elisp
  (add-hook 'verb-response-body-mode-hook 'verb-toggle-show-headers)

  (spacemacs/set-leader-keys-for-minor-mode
    'verb-response-body-mode
    "rs" #'verb-show-request)
#+end_src
** Restclient
#+begin_src emacs-lisp
  (defun haris/org-babel-restclient-split-window-fix ()
    "Fixes a bug where executing a restclient code block splits the window."
    (interactive)
    (if (string=
         (car (org-babel-get-src-block-info))
         "restclient")
        (delete-window)))

  (add-hook 'org-babel-after-execute-hook 'haris/org-babel-restclient-split-window-fix)
#+end_src
** Bindings
#+begin_src elisp
  ;; Make org-cycle work only in evil normal state, so it doesn't interfere with
  ;; completion etc.
  (define-key org-mode-map (kbd "TAB") nil t)
  (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)

  (evil-define-key 'normal org-mode-map     (kbd ", S")         'org-attach-screenshot)
  (evil-define-key 'normal org-mode-map     (kbd ", TAB")       'org-next-link)
  (evil-define-key 'normal org-mode-map     (kbd ", <backtab>") 'org-previous-link)
  (evil-define-key 'normal org-src-mode-map (kbd ", w")         'org-edit-src-save)
  (evil-define-key 'normal org-mode-map     (kbd ", i c")       'org-columns)
  (evil-define-key 'normal org-mode-map     (kbd ", b E")       'haris/execute-named-code-block)

  (evil-define-key 'normal org-mode-map (kbd "SPC h o")     'org-info-find-node)
#+end_src
*** Helper functions
#+begin_src elisp
  (defun haris/execute-named-code-block ()
    "Execute a named code block from the current buffer, interactively prompting
     the user."
    (interactive)
    (save-excursion
      (call-interactively 'org-babel-goto-named-src-block)
      (org-babel-execute-src-block-maybe)))
#+end_src
* Man
#+begin_src elisp
  (setq Man-notify-method 'bully)
#+end_src
** Bindings
#+begin_src emacs-lisp
  (evil-collection-init 'man)

  (defun haris/man-search () (interactive)
         (swiper "^[[:space:]]+"))

  (add-hook 'Man-mode-hook (lambda ()
                             (define-key Man-mode-map (kbd "SPC s ^") 'haris/man-search)))
#+end_src
* ERC
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el")
  (use-package erc)
  (setq erc-server "irc.libera.chat"
        erc-nick "veracioux"
        erc-user-full-name "Haris Gušić"
        erc-track-shorten-start 8
        erc-autojoin-channels-alist '(("irc.libera.chat" "#archlinux" "#Jobs" "#fossjobs"))
        erc-kill-buffer-on-part t
        erc-auto-query 'bury)

  (add-hook 'erc-join-hook (lambda () (evil-normal-state)))

  ;; For some reason erc-modules is undefined
  (add-to-list 'erc-modules 'notifications)
  (delete 'readonly erc-modules)
  (erc-services-mode 1)
  (erc-update-modules)

  (erc-notify-mode t)
  (erc-notifications-mode t)
#+end_src
** Keybindings
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el")
  (defun haris/erc-quit-channel () (interactive)
         (erc-part-from-channel ""))
  (defun haris/euirc () (interactive)
         (erc :server "irc.euirc.net" :port 6667 :nick "veracioux"))
  (defun haris/erc-list-channels () (interactive)
         (erc-with-server-buffer
          (erc-kill-input)
          (insert "/list")
          (erc-send-current-line)))

  (define-key               erc-mode-map    (kbd "C-l") 'comint-clear-buffer)
  (evil-define-key  'normal erc-mode-map    (kbd ",b")  'erc-switch-to-buffer)
  (evil-define-key  'normal erc-mode-map    (kbd ",j")  'erc-join-channel)
  (evil-define-key  'normal erc-mode-map    (kbd ",q")  'haris/erc-quit-channel)
  (evil-define-key  'normal erc-mode-map    (kbd ",l")  'haris/erc-list-channels)

  (evil-define-key  'motion erc-list-menu-mode-map  (kbd "RET")   nil)
  (evil-define-key  'normal erc-list-menu-mode-map  (kbd "RET")   nil)
  ;; TODO shadowed by evil binding, don't know how to fix
  ;; (evil-define-key  'normal erc-list-menu-mode-map  (kbd ",j")   'erc-list-join)
#+end_src
** Theme tweak
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el")
  (setq erc-track-faces-priority-list
        '(erc-error-face
          erc-notice-face
          (erc-nick-default-face erc-current-nick-face)
          erc-current-nick-face erc-keyword-face
          (erc-nick-default-face erc-pal-face)
          erc-pal-face erc-nick-msg-face erc-direct-msg-face
          (erc-button erc-default-face)
          (erc-nick-default-face erc-dangerous-host-face)
          erc-dangerous-host-face erc-nick-default-face
          (erc-nick-default-face erc-default-face)
          erc-default-face erc-action-face
          (erc-nick-default-face erc-fool-face)
          erc-fool-face erc-input-face erc-prompt-face))
#+end_src
** Systemd service
#+NAME: irc.service
#+begin_src conf :tangle (haris/tangle-home ".config/systemd/user/irc.service")
  [Unit]
  Description=Emacs daemon for IRC chat
  Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

  [Service]
  Type=forking
  ExecStart=/usr/bin/emacs --daemon="irc"
  ExecStop=/usr/bin/emacsclient --socket-name="irc" --eval "(kill-emacs)"
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src
* TODO Slack
slack-register-team automatically connects to slack. If I add it to the
slack-mode-hook hook, it never connects. Investigate
#+begin_src emacs-lisp
  ;; (add-hook
  ;;  'slack-mode-hook
  ;;  (lambda ()
  ;;    ;; Add slack teams here
  ;;    (slack-register-team
  ;;     :name "efektivnialtruismus"
  ;;     :token (auth-source-pick-first-password
  ;;             :host "efektivnialtruismus.slack.com"
  ;;             :user "hgusic.pub@gmail.com")
  ;;     :cookie (auth-source-pick-first-password
  ;;              :host "efektivnialtruismus.slack.com"
  ;;              :user "hgusic.pub@gmail.com^cookie")
  ;;     :subscribed-channels '((main-announcements
  ;;                             main-community-events
  ;;                             main-opportunities
  ;;                             main-random
  ;;                             project-eahouse)))))
#+end_src
* Git
#+begin_src emacs-lisp
  (use-package git-gutter :defer t)

  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1
        magit-diff-refine-hunk 'all)

  (setq magit-repository-directories
        '(("~/.haris" . 0)
          ("~/proj" . 1)
          ("~/proj/drytoe" . 1)
          ("~" . 0)))
#+end_src
** Custom transient commands
#+begin_src elisp
  (defun haris/magit-fetch-to-local (remote branch args)
    "Fetch a remote branch to a local branch of the same name"
    (interactive
     (let ((remote (magit-read-remote-or-url "Fetch from remote or url")))
       (list remote
             (magit-read-remote-branch "Fetch branch" remote)
             (magit-fetch-arguments))))
    (magit-git-fetch remote (cons (concat branch ":" branch) args)))

  (add-hook 'magit-status-mode-hook
            (lambda ()
               (transient-append-suffix
                 'magit-fetch "o"
                 '(1 "O" "another, to local" haris/magit-fetch-to-local))))
#+end_src
** TODO GitHub                                                  :deprecated:
#+begin_src emacs-lisp
  (setq auth-sources '(password-store "~/.authinfo.dev.gpg" "~/.netrc.gpg"))
#+end_src
* Octave mode
#+begin_src emacs-lisp
  (defun octave-write-and-source () (interactive)
         (write-file (buffer-file-name))
         (octave-source-file (buffer-file-name)))

  (evil-define-key 'normal octave-mode-map
    (kbd ",ss") 'octave-write-and-source)
  (evil-define-key 'normal inferior-octave-mode-map
    (kbd ",hh") 'octave-help)
#+end_src
* Comint
#+NAME: comint
#+begin_src emacs-lisp
  (evil-collection-init 'comint)
  (defun comint-clear-buffer-goto () (interactive)
         (comint-clear-buffer) (evil-goto-line))
  (define-key comint-mode-map (kbd "C-l") 'comint-clear-buffer-goto)

  (evil-define-key 'insert comint-mode-map (kbd "C-p") 'comint-previous-input)
  (evil-define-key 'insert comint-mode-map (kbd "C-n") 'comint-next-input)

  (evil-define-key 'insert comint-mode-map (kbd "C-k") 'comint-previous-prompt)
  (evil-define-key 'insert comint-mode-map (kbd "C-j") 'comint-next-prompt)
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<comint>>
#+end_src
* EAF
** Dependencies
#+begin_src shell :tangle (haris/tangle-deps "emacs-eaf.sh")
  sudo pacman -S git nodejs npm python-pyqt5 python-pyqt5-sip \
       python-pyqtwebengine wmctrl python-pymupdf
  paru -S python-epc
#+end_src
* Vterm
#+begin_src emacs-lisp
  (setq vterm-exit-functions 'delete-frame)
  ;; If I set vterm-shell directly, it is overriden by shell layer
  (setq shell-default-term-shell "fish")

  (add-hook 'vterm-mode-hook (lambda () (read-only-mode -1)))

  (evil-define-key 'normal vterm-mode-map (kbd "A")     'evil-append-line)
  (evil-define-key 'normal vterm-mode-map (kbd "M-TAB") 'other-window)
#+end_src
** TODO WTF?
This doesn't work consistently.
#+begin_src emacs-lisp
  ;; (define-key vterm-mode-map (kbd "C-l") 'vterm-clear-scrollback)
  ;; (define-key vterm-mode-map (kbd "C-l") 'erase-buffer)
  ;; (define-key vterm-mode-map (kbd "C-d") 'vterm-send-C-d)
#+end_src
* TODO Email
:PROPERTIES:
:header-args: :tangle no
:END:
I use mu4e as my email client.
#+begin_src emacs-lisp
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every M minutes
  (setq mu4e-update-interval (let ((M 4)) (* M 60)))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-enable-async-operations t)

  ;; Configure contexts
  (setq mu4e-contexts
        `(
          ,(make-mu4e-context
            :name "p-hgusic.pub@gmail.com"
            :match-func (lambda (msg) (when msg (mu4e-message-contact-field-matches msg :to "hgusic.pub@gmail.com")))
            :enter-func (lambda () (message "Entering context: hgusic.pub@gmail.com"))
            :vars '((user-mail-address . "hgusic.pub@gmail.com")
                    (user-full-name . "Haris Gusic")
                    (mu4e-drafts-folder .     "/gmail/hgusic.pub/[Gmail]/Drafts")
                    (mu4e-sent-folder   .     "/gmail/hgusic.pub/[Gmail]/Sent Mail")
                    (mu4e-refile-folder .     "/gmail/hgusic.pub/[Gmail]/All Mail")
                    (mu4e-trash-folder  .     "/gmail/hgusic.pub/[Gmail]/Trash")
                    (
                     mu4e-maildir-shortcuts
                     . (("/gmail/hgusic.pub/Inbox"             . ?i)
                        ("/gmail/hgusic.pub/[Gmail]/Sent Mail" . ?s)
                        ("/gmail/hgusic.pub/[Gmail]/Trash"     . ?t)
                        ("/gmail/hgusic.pub/[Gmail]/Drafts"    . ?d)
                        ("/gmail/hgusic.pub/[Gmail]/All Mail" . ?a)))))

          ,(make-mu4e-context
            :name "d-harisgusic.dev@gmail.com"
            :match-func (lambda (msg) (when msg (mu4e-message-contact-field-matches msg :to "harisgusic.dev@gmail.com")))
            :enter-func (lambda () (message "Entering context: harisgusic.dev@gmail.com"))
            :vars '((user-mail-address . "harisgusic.dev@gmail.com")
                    (user-full-name . "Haris Gusic")
                    (mu4e-drafts-folder .     "/gmail/harisgusic.dev/[Gmail]/Drafts")
                    (mu4e-sent-folder   .     "/gmail/harisgusic.dev/[Gmail]/Sent Mail")
                    (mu4e-refile-folder .     "/gmail/harisgusic.dev/[Gmail]/All Mail")
                    (mu4e-trash-folder  .     "/gmail/harisgusic.dev/[Gmail]/Trash")
                    (
                     mu4e-maildir-shortcuts
                     . (("/gmail/harisgusic.dev/Inbox"             . ?i)
                        ("/gmail/harisgusic.dev/[Gmail]/Sent Mail" . ?s)
                        ("/gmail/harisgusic.dev/[Gmail]/Trash"     . ?t)
                        ("/gmail/harisgusic.dev/[Gmail]/Drafts"    . ?d)
                        ("/gmail/harisgusic.dev/[Gmail]/All Mail" . ?a)))))
          ))

  (setq mu4e-context-policy         'ask
        mu4e-compose-context-policy 'ask)

  (setq mu4e-org-support t)
  ;; Enable org mode when composing messages
  (setq mu4e-org-compose-support t)
#+end_src
** Sending messages
#+begin_src emacs-lisp
  ;; Show completion for From and To headers
  (setq mail-user-agent 'mu4e-user-agent)
  (setq message-mail-alias-type 'ecomplete)

  (add-hook 'message-setup-hook 'flyspell-mode)
#+end_src
** TODO Notifications
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src emacs-lisp
  (use-package mu4e-alert :defer t)
  (setq mu4e-enable-notifications t)
  (mu4e-alert-set-default-style 'libnotify)
#+end_src
* Programming languages
** YAML
YAML indentation is just broken. This disables it completely.
#+begin_src emacs-lisp
  (defun yaml-indent-line ())
  (setq yaml-indent-offset 2)
#+end_src
*** YAML Pro Mode
#+begin_src elisp
  (eval-after-load "yaml"
    (lambda ()
      (use-package yaml-pro)
      (use-package counsel-jq)))

  (let ((hooks '(yaml-mode-hook yaml-ts-mode-hook))
        (hook))
    (dolist (hook hooks)
      (add-hook hook 'eldoc-mode)
      (add-hook hook 'yaml-pro-ts-mode)
      (add-hook hook (lambda ()
                       (setq-local counsel-jq-command "yq")))))
#+end_src
*** Keybindings
#+begin_src elisp
  (eval-after-load "yaml"
    (lambda ()
      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd "M-n") 'yaml-pro-ts-next-subtree)
      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd "g j") 'yaml-pro-ts-next-subtree)
      (define-key yaml-pro-ts-mode-map (kbd "C-c C-n") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd "M-p") 'yaml-pro-ts-prev-subtree)
      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd "g k") 'yaml-pro-ts-prev-subtree)
      (define-key yaml-pro-ts-mode-map (kbd "C-c C-p") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd "g h") 'yaml-pro-ts-up-level)
      (define-key yaml-pro-ts-mode-map (kbd "C-c C-u") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd ", '") 'yaml-pro-edit-ts-scalar)
      (define-key yaml-pro-ts-mode-map (kbd "C-c '") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd ", <") 'yaml-pro-ts-unindent-subtree)
      (define-key yaml-pro-ts-mode-map (kbd "C-c <") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd ", >") 'yaml-pro-ts-indent-subtree)
      (define-key yaml-pro-ts-mode-map (kbd "C-c >") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd ", v") 'yaml-pro-ts-mark-subtree)
      (define-key yaml-pro-ts-mode-map (kbd "C-c @") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd "M-j") 'yaml-pro-ts-move-subtree-down)
      (define-key yaml-pro-ts-mode-map (kbd "s-<down>") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd "M-k") 'yaml-pro-ts-move-subtree-up)
      (define-key yaml-pro-ts-mode-map (kbd "s-<up>") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd ", d") 'yaml-pro-kill-subtree)
      (define-key yaml-pro-ts-mode-map (kbd "C-c C-x C-w") nil)

      (evil-define-key 'normal yaml-pro-ts-mode-map (kbd ", p") 'yaml-pro-ts-paste-subtree)
      (define-key yaml-pro-ts-mode-map (kbd "C-c C-x C-y") nil)))
#+end_src
** JSON
#+begin_src elisp
  (defun haris/json/set-indent-level () (setq-local js-indent-level 2))

  (add-hook 'json-mode-hook 'haris/json/set-indent-level)
#+end_src
** LSP
#+begin_src emacs-lisp
  ;;(add-to-list 'projectile-project-root-files-functions 'custom/lsp-default-dir)(setq lsp-auto-guess-root t)
  (setq projectile-require-project-root t)
  ;; (add-hook 'lsp-mode-hook (lambda () (cd (file-name-directory buffer-file-name))))

  ;; Diagnostic mode doesn't work well with flycheck
  (setq lsp-diagnostics-disabled-modes '(python-mode sh-mode))

  (setq lsp-enable-on-type-formatting nil)
#+end_src
** DAP
#+begin_src emacs-lisp
  (setq dap-auto-show-output nil)
#+end_src
** TODO C/C++
#+begin_src emacs-lisp
  (setq c-default-style "bsd"
        c-basic-offset 4)

  (add-hook 'c-mode-hook    (lambda () (setq tab-width 4)))
  (add-hook 'c++-mode-hook  (lambda () (setq tab-width 4)))
#+end_src
*** CMake
#+begin_src emacs-lisp
  (defun haris/cmake-info () (interactive)
         (info-display-manual "cmake")
         (Info-top-node))
  (defun haris/cmake-help () (interactive)
         (split-window-right-and-focus)
         (let ((symbol (cmake-symbol-at-point)))
           (haris/cmake-info)
           (Info-menu symbol)))

  (evil-define-key 'normal cmake-mode-map (kbd ",hc") 'haris/cmake-info)
  (evil-define-key 'normal cmake-mode-map (kbd ",hh") 'haris/cmake-help)
#+end_src
*** Dependencies
#+begin_src shell :tangle (haris/tangle-deps "/emacs_c-c++.sh")
  sudo pip install cmake-language-server
#+end_src
** Python
Spacemacs: elpy layer downloaded from [[https://github.com/rgemulla/spacemacs-layers][here]]
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook (lambda () (setq tab-width 4)))

  (setq python-shell-interpreter "ipython")
  ;; python-shell-interpreter-args "-i")

  (setq lsp-pylsp-plugins-pylint-enabled t
        lsp-pylsp-plugins-flake8-enabled nil
        lsp-pyls-plugins-flake8-enabled  nil
        lsp-diagnostics--flycheck-enabled t)

  ;; (add-hook 'python-mode-hook 'lsp)
  (add-hook 'lsp-mode-hook (lambda ()
                             (setq default-directory (lsp-workspace-root))))

  ;; elpy
  (setq elpy-modules nil)
#+end_src
*** Bindings
#+begin_src emacs-lisp
  (evil-define-key 'normal lsp-mode-map (kbd ",GG") 'lsp-ui-doc-glance)
#+end_src
*** Dependencies
#+begin_src shell :tangle (haris/tangle-deps "emacs-python.sh")
  sudo pacman -S python-lsp-server flake8 python-typing_extensions \
       python-lsp-black python-pylint
  sudo pip install pyls-isort pyls-mypy pyls-memestra \
       autoflake importmagic epc ptvsd
#+end_src
** RST
#+begin_src emacs-lisp
  (defun haris/rst-heading () (interactive)
         (evil-execute-macro 1 "\"yyyp^v$"))

  (define-key evil-normal-state-map (kbd ", H") 'haris/rst-heading)
#+end_src
* Completion
Note: Some variables are configured in [[*Layers][Spacemacs layers]].
** Company
#+begin_src elisp
  (use-package company)

  ;; Enable company-mode in some modes
  ;; (merely enabling global-company-mode causes issues)
  (add-hook 'sh-mode-hook #'company-mode)
  (add-hook 'minibuffer-mode-hook #'company-mode)

  (defun haris/company-toggle-tooltip ()
    (interactive)
    (cond
     ((company-tooltip-visible-p) (company-cancel))
     ((company-complete))))

  ;; Additional trigger for company
  (define-key evil-insert-state-map (kbd "C-SPC") #'haris/company-toggle-tooltip)
#+end_src
** Yasnippet
#+begin_src elisp
  (use-package yasnippet)

  (add-to-list 'yas-extra-modes 'git-commit-mode)

  (advice-add 'yas-tryout-snippet :after #'evil-insert-state)

  (define-key yas-keymap (kbd "<backtab>") 'yas-prev-field)
#+end_src
** The =TAB= key
The TAB key is much abused. Keeping track of it in each minor mode separately is
a nightmare. Therefore I unbind TAB in some keymaps so that it falls back to the
TAB binding in the global keymap. This way, I can define the exact order of
precedence of TAB-bound commands for all modes.
#+begin_src elisp
  ;; Remove TAB (and <tab>) bindings in some keymaps so that it falls back to
  ;; global map.

  (global-unset-key (kbd "TAB"))
  (define-key yas-keymap (kbd "<tab>") nil)
  (define-key yas-keymap (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key company-active-map (kbd "TAB") nil)
  (define-key company-active-map (kbd "<tab>") nil)
  (define-key company-mode-map (kbd "TAB") nil)
  (evil-define-key 'insert company-mode-map (kbd "TAB") nil)

  (defun haris/handle-TAB-in-insert-mode (&optional alert)
    "Handle the TAB key exactly the way I want to."
    (interactive)
    (setq alert command-log-mode)

    (let ((last-fun nil))
      (defun _ (fun &rest rest)
        "Call the function normally, and record it to the last-fun variable."
        (setq last-fun fun)
        (apply fun rest))

      (ignore-errors
          (cond
           ;; If in an org table, try org-cycle
           ((when (and (fboundp 'org-at-table-p) (org-at-table-p)) (_ 'org-cycle)))
           ;; Try to complete using org-tempo before yasnippet
           ((org-tempo-complete-tag))
           ;; If yas-minor-mode is on, try yas-next-field, otherwise yas-expand
           ((when yas-minor-mode
              (condition-case err
                  (or (_ 'yas-next-field) t)
                (error
                 (_ 'yas-expand)))))
           ;; If company-mode is on, try completing/showing tooltip
           ((when company-mode (_ 'company-complete-selection)))
           ;; If org-mode is on, try org-cycle
           ((when (eq major-mode 'org-mode)
              (cond ((_ 'org-cycle))
                    ;; If there's nothing to cycle, go to next link
                    ((_ 'org-next-link)))))
           ;; Try completion-at-point using company-capf. This is necessary because
           ;; company-complete-selection above doesn't always work.
           ((_ (lambda () (call-interactively #'company-capf))))
           ;; Fallback
           ((_ 'indent-for-tab-command))))

      (when alert
        (alert (format "%s" last-fun)
               :title "Command bound to pressed key:"))))

  (define-key evil-insert-state-map (kbd "TAB") #'haris/handle-TAB-in-insert-mode)
#+end_src
* Info mode
Remove Info mode annoying keybindings.
#+NAME: info
#+begin_src emacs-lisp
  (evil-collection-init 'info)
  (evil-define-key 'normal Info-mode-map (kbd "[")    'Info-prev)
  (evil-define-key 'normal Info-mode-map (kbd "]")    'Info-next)
  (evil-define-key 'normal Info-mode-map (kbd "C-p")  'Info-backward-node)
  (evil-define-key 'normal Info-mode-map (kbd "C-n")  'Info-forward-node)
#+end_src
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/irc.el") :exports none
  <<info>>
#+end_src
* Miscellaneous
** TODO Ispell
#+begin_src elisp
  (setq ispell-program-name "aspell")
#+end_src
** Reddit
*** md4rd
#+begin_src emacs-lisp
  (add-hook 'md4rd-mode-hook 'md4rd-indent-all-the-lines)
  (setq md4rd-subs-active '(linuxquestions+linux+opensource plc))
#+end_src
*** reddigg
This is a very elegant reader for reddit that uses org-mode.
#+begin_src emacs-lisp
  (defun reddit-view-linux () (interactive)
         (reddigg-view-sub "linux+linuxquestions+opensource"))
  (defun reddit-view-elec () (interactive)
         (reddigg-view-sub "plc+ElectricalEngineering+embedded"))
#+end_src
** Ibuffer
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/root.el")
  (evil-collection-init 'ibuffer)
  (define-key ibuffer-mode-map (kbd "j") 'evil-next-line)
  (define-key ibuffer-mode-map (kbd "k") 'evil-previous-line)
#+end_src
** Currency converter
#+begin_src emacs-lisp
  (use-package currency-convert
    :defer t
    :init (lambda () (setq
                      currency-convert-exchangeratesapi-key
                      (string-trim (shell-command-to-string "pass show @apilayer/api-key")))))
#+end_src
** Docker
Fix for empty image list (not sure if the fix works):
#+begin_src emacs-lisp
  (use-package transient :defer t)
#+end_src
** Bluetooth
#+begin_src emacs-lisp
  (use-package bluetooth :defer t)
#+end_src
** EDBI
Database viewer in Emacs.
#+begin_src elisp
  (use-package edbi
    :defer t
    :config (progn
              (define-key edbi:dbview-keymap (kbd "SPC") nil)
              (define-key edbi:dbview-keymap (kbd "RET")
                'edbi:dbview-show-tabledef-command)))
#+end_src
*** Dependencies
#+begin_src shell :tangle (haris/tangle-deps "edbi.sh")
  sudo cpan RPC::EPC::Service DBI
  # For postgres support
  sudo cpan DBD::Pg
#+end_src
** Maxima
I used this mode like 2-3 times, but I'm keeping it in case I have to use it again.
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/maxima/")
  (autoload 'maxima-mode "maxima" "Maxima mode" t)
  (autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
  (autoload 'maxima "maxima" "Maxima interaction" t)
  (autoload 'imath-mode "imath" "Imath mode for math formula input" t)
  (setq imaxima-use-maxima-mode-flag t)
  (add-to-list 'auto-mode-alist '("\\.ma[cx]\\'" . maxima-mode))
#+end_src
** Command log mode
#+begin_src elisp
  (setq command-log-mode-auto-show nil)

  ;; TODO: sometimes you have to call this twice for the command-log buffer to appear
  (defun haris/command-log ()
    (interactive)
    (let ((command-log-mode-auto-show t))
      (call-interactively #'command-log-mode)))
#+end_src
** Nerd commenter
#+begin_src emacs-lisp
  (add-hook 'octave-mode-hook
            (lambda ()
              (setq comment-start "% "
                    comment-end "")))
  (define-key evil-normal-state-map (kbd "SPC c c") 'evilnc-copy-and-comment-lines)
#+end_src
** Alert
#+begin_src emacs-lisp
  (setq alert-default-style 'libnotify)
#+end_src
* Spacemacs
The code blocks in this section are tangled to [[~/.spacemacs-init.el]]. This file
is in turn loaded from [[~/.spacemacs]]. code block]].
** Layers
#+begin_src emacs-lisp :tangle (haris/tangle-home ".spacemacs-init.el")
  (setq-default
   dotspacemacs-configuration-layers
   '(syntax-checking
     octave
     markdown
     html
     spacemacs-language
     spacemacs-navigation
     helpful
     ivy
     imenu-list
     (c-c++ :variables c-c++-backend 'lsp-clangd c-c++-enable-clang-support t)
     (cmake :variables cmake-backend 'lsp cmake-enable-cmake-ide-support t)
     (python :variables python-formatter 'black python-backend 'lsp)
     dap
     vagrant
     ;; elpy
     ;; pythonp
     ipython-notebook
     emacs-lisp
     shell
     typescript
     yaml
     csv
     rust
     docker
     vagrant
     translate
     git
     lua
     (org :variables
          org-enable-appear-support t
          org-enable-transclusion-support t
          org-enable-verb-support t)
     restclient
     slack
     ;; mu4e
     pass
     sql
     ;; eaf
     ;; emms
     debug
     (auto-completion
      :variables
      auto-completion-enable-snippets-in-popup t
      auto-completion-enable-sort-by-usage     t)))
#+end_src
** Additional packages
Packages installed with =use-package= should be added here as well. Otherwise
Spacemacs would delete them every time on startup.
#+begin_src emacs-lisp :tangle (haris/tangle-home ".spacemacs-init.el")
  (setq-default
   dotspacemacs-additional-packages
   '(
     org-fragtog
     org-drill
     org-ref
     org-attach-screenshot
     org-special-blocks
     ob-ipython
     yasnippet-snippets
     vterm
     rainbow-mode
     evil-easymotion
     reddigg
     md4rd
     pydoc
     pylint
     python-info
     nodejs-repl
     command-log-mode
     org-preview-html
     vimrc-mode
     yaml-pro
     systemd
     evil-quickscope
     edbi
     counsel-jq
     sxhkdrc-mode
     bluetooth
     git-gutter
     json-mode
     fish-mode
     currency-convert
     i3wm-config-mode
     react
     focus-autosave-mode))
#+end_src
** Upgrading
When upgrading Spacemacs, run [[elisp:(spacemacs/ediff-dotfile-and-template)][spacemacs/ediff-dotfile-and-template]] to merge any upstream changes to the dotfile.
* Appendix
** Config check
I use this variable to check if the config loaded correctly.
#+NAME: config-loaded-fine
#+begin_src emacs-lisp :tangle (haris/tangle-home ".emacs.d/haris/root.el")
  (setq haris/config-loaded-fine (current-time-string))
#+end_src
** Local variables                                                :noexport:
# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
