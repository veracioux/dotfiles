#!/usr/bin/env sh

# If an argument is provided, run corresponding custom dmenu script
[ -n "$1" ] && ~/.local/lib/dmenu/"$1"
# Otherwise open a generic dmenu where the user will choose what dmenu script
# or other program to run

run_script() { ~/.local/lib/dmenu/"$1"; }

extract_aliases() {
    sed "s_.* \(.*\)=\('\|\"\).*\2.*_\1_" $@
}

pull_desktop_apps() {
    # Print out desktop apps by reading *.desktop files and also cache them
    sed -n -e '/^Exec=/p'                       \
        /usr/share/applications/*.desktop       \
        ~/.local/share/applications/*.desktop   |
        sed 's/Exec=\(\S*\).*/\1/'              |
    while read line; do
        basename $line
    done                                        |
    sort | uniq | tee "$cache_file"
}
get_desktop_apps() {
    cache_file=~/.cache/.desktop-apps.txt
    age="$(date -d "now - $(stat -c '%Y' "$cache_file") seconds" +%s)"
    # Refresh the cache only if the file is older than a specified age (seconds)
    [ ! -f "$cache_file" -o  $age -gt 36000 ]    \
        && pull_desktop_apps                        \
        || cat "$cache_file"
    find ~/.local/bin -executable -type f -printf '%f\n'
}
get_aliases() {
    extract_aliases ~/.alias ~/.alias-tmp
}
get_gui_aliases() {
    extract_aliases ~/.alias-gui ~/.alias-gui-tmp
}

aliases="$(get_aliases)"
gui_aliases="$(get_gui_aliases)"

# ┏━━━━━━━━━━━━━━━┓
# ┃ dmenu entries ┃
# ┗━━━━━━━━━━━━━━━┛
get_commands() {
    echo "Open"             # Open an URL or bookmark
    echo "Search"           # Web search
    echo "Clipboard"        # Clipboard using clipmenu
    echo "Snippets"         # Text snippets
    echo "TODO"             # Open TODO file of a project
    echo "Mail"             # View mail in browser
    echo "Windows"          # Choose windows
    echo "Pacman"           # Package management
    echo "Color"            # Pick a color
    echo "Unicode"          # Pick an icon
    echo "Kill Process"     # Kill process
    echo "Fix Wifi"         # Fix Wi-Fi drop issue on some networks
    echo "Config"           # Open documentation selection
    echo "System"           # System actions
    echo "Update cache"     # Update desktop app cache
    echo "tem"              # Launch tem development environment
    echo "$aliases"
    echo "$gui_aliases"
    get_desktop_apps        # Programs extracted from *.desktop files
}

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Actions based on user's choice ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
choice="$(get_commands | dmenu $@)"
case "$choice" in
    "")
        exit ;;
    "Open")
        run_script open ;;
    "Search")
        choice="$(echo -n '' | dmenu -p 'Search:')" && firefox -P haris "$choice"
        ;;
    "Clipboard")
        clipmenu ;;
    "Snippets")
        run_script snips ;;
    "TODO")
        run_script todo ;;
    "Mail")
        run_script mail ;;
    "Windows")
        ~/.local/lib/i3/i3-container-commander.py ;;
    "Pacman")
        run_script pacman ;;
    "Color")
        run_script color ;;
    "Unicode")
        run_script unicode ;;
    "Kill Process")
        run_script pkill ;;
    "Fix Wifi")
        rfkill block wifi && rfkill unblock wifi ;;
        #nmcli networking off; sleep 6; nmcli networking on ;;
    "Config")
        run_script config ;;
    "System")
        run_script system ;;
    "Update cache")
        rm ~/.cache/.desktop-apps.txt ;;
    "tem")
        alacritty -e fish -C 'pj tem; clear' ;;
    # The rest: aliases and regular commands
    *)
        # If the command is an aliased GUI program, just run it
        for al in $gui_aliases; do
            if [ "$choice" = "$al" ]; then
                fish -C "$choice"    # Only fish works here
                exit
            fi
        done
        # If the command is an aliased CLI program, open it in fish
        for al in $aliases; do
            if [ "$choice" = "$al" ]; then
                guirun alacritty --class Float,Alacritty -e fish -C "$choice"
                exit
            fi
        done
        # Fallback, if the entry matches none of the above, just run the command
        fish -C "cmd-with-notify $choice"
        ;;
esac
