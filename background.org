#+TITLE: Background processes
#+SETUPFILE: .setup.org
#+TAGS: service(S)

* Setup
Enable all the background services with:
#+begin_src shell
  systemctl --user enable --now haris-background.target
#+end_src
** Systemd target for all background services
Note: [[*Clipmenud][Clipmenud]] is started by [[file:wm.org::(clipmenud)][startx]] to ensure a graphical session exists.
#+begin_src systemd :tangle (haris/tangle-home ".config/systemd/user/haris-background.target")
  [Unit]
  Description=Background services
  Wants=crontab-listen-update.service
  Wants=emacs.service
  Wants=irc.service
  Wants=verm.service
  Wants=ssh-agent.service
  Wants=vpn-notifier.service
  # Wants=clipmenud.service
  AllowIsolate=yes

  [Install]
  WantedBy=default.target
#+end_src
* Clipmenud
NOTE: The =CM_DIR= environment variable was overridden [[file:shells.org::(CM_DIR)][here]].
#+begin_src systemd :tangle (haris/tangle-home ".config/systemd/user/clipmenud.service")
  [Unit]
  Description=Clipboard daemon

  [Service]
  Environment=CM_DEBUG=1
  Environment=CM_MAX_CLIPS=99999
  Environment=XDG_RUNTIME_DIR=/run/user/%U
  ExecStart=/usr/bin/env clipmenud

  [Install]
  WantedBy=default.target
#+end_src
* Jira Branch Transformer
#+begin_src systemd :tangle (haris/tangle-home ".config/systemd/user/jira-branch-transformer.service")
  [Unit]
  Description=Jira Branch Transformer

  [Service]
  ExecStart=/usr/bin/env jira-branch-transformer

  [Install]
  WantedBy=default.target
#+end_src
** Executable
#+begin_src bash :tangle (haris/tangle-home ".local/bin/jira-branch-transformer")
  while :; do
      echo "Scanning clipboard..."
      cb="$(timeout 1s xsel -bo)"
      if grep -qE <<<"$cb" "^git checkout -b [A-Z]+-[0-9]+"; then
          echo "Clipboard matched. Transforming to branch name..."
          get-branch
      fi
      sleep 2
  done
#+end_src
* VPN Notifier
#+begin_src systemd :tangle (haris/tangle-home ".config/systemd/user/vpn-notifier.service")
  [Unit]
  Description=VPN notifier

  [Service]
  Environment=XDG_RUNTIME_DIR=/run/user/%U
  ExecStart=/usr/bin/env vpn-notifier
  SyslogIdentifier=vpn-notifier

  [Install]
  WantedBy=default.target
#+end_src
* Cron
I define my main users cron jobs in files matching the glob =~/.cron.d/crontab.*=.
** Default cron jobs
:PROPERTIES:
:header-args+: :tangle (haris/tangle-home ".cron.d/crontab.50")
:END:
Modify PATH variable to match the normal environment's value:
#+begin_src crontab
  PATH=<<eval-path-env()>>
#+end_src
*** Low battery suspend
#+begin_src crontab
  * * * * * handle-low-bat
#+end_src
*** Check website online
#+begin_src crontab
  0 */2 *   * 1-6 website-healthcheck
  0 20  */4 * 1-6 website-healthcheck --notify-success
#+end_src
*** Remind me to reissue SSL certificate
#+begin_src crontab
  0 18-23 10 */2 * notify-send 'REMINDER' 'Reissue SSL certificate for veracioux.me'
#+end_src
*** Update fish completions
#+begin_src crontab
  0 20 * * * fish -c 'fish_update_completions'
#+end_src
** Listen/update service                                           :service:
This service updates the user's crontab when any of the custom crontab files change.
#+begin_src systemd :tangle (haris/tangle-home ".config/systemd/user/crontab-listen-update.service")
  [Unit]
  Description=Crontab change listener and updater

  [Service]
  ExecStart=<<eval-user-home()>>/.local/bin/crontab-listen-update
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src
*** Executable
#+begin_src shell :tangle (haris/tangle-home ".local/bin/crontab-listen-update")
  if ! which inotifywait 2>/dev/null; then
      echo "ERROR: inotifywait is not installed. Aborting."
      exit 1
  fi

  mkdir -p ~/.cron.d/
  while :; do
      content=''
      for file in ~/.cron.d/*; do
          echo "Read crontab file: $file"
          content="$(
              echo "$content"
              echo
              echo "############## START $file"
              echo
              cat "$file"
              echo
              echo "############## END  $file"
          )"
      done
      echo "$content" | crontab -
      echo "Resulting content of crontab:"
      crontab -l
      echo
      inotifywait -e modify -e attrib -e create -e delete ~/.cron.d/
  done
#+end_src
* Helpers
#+NAME: eval-user-home
#+begin_src emacs-lisp :cache yes
  (getenv "HOME")
#+end_src
#+NAME: eval-path-env
#+begin_src emacs-lisp
  (getenv "PATH")
#+end_src
#+NAME: eval-xdg-runtime-dir
#+begin_src emacs-lisp
  (getenv "XDG_RUNTIME_DIR")
#+end_src
* Local variables
# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
