#+TITLE: Haris' Config
#+PROPERTY: header-args :tangle-mode (identity #o755)

Welcome. This is my personal dotfile repository. I use Arch Linux, so these
dotfiles are customized to work there. I have also used a Macbook when
professionally required, so most of the configs will work there too, but expect
some incompatibilities and occasional breakage.

I do not directly keep my dotfiles in this repository. Rather, I write them as
literary documents with the actual configs embedded as code blocks. With the
help of Emacs and it's excellent =org-mode=, I can run a command and those code
blocks go exactly into the config file they need to. This approach is known as
literate programming.

I find it superior to keeping the config files directly because:
- It is much easier to document my configuration as it has become quite complex
  and reading/writing it this way feels more natural.
- I can group related configuration from multiple programs in a single file, and
  then export (/tangle/ is the technical term) them where they need to go. See for
  example: [[file:~/.haris/shells.org][.haris/shells.org]].
- For each application, I can use the same org file to keep its configuration
  and a script that installs all of its dependencies.
- I can use the breadth of =org-mode= features to more easily navigate my configs.
- It is very satisfying.
- *[In progress]* I can put all the configs into a =~/.haris= folder and make that a
  regular git repository, instead of keeping a bare repo in my home directory,
  which has some drawbacks.

*NOTE:* I am still in the process of migrating my traditional configs to this
format, so this repo is a bit fragmented and incomplete.

* Usage
I keep all persistent user configs in org files, and use =org-babel-tangle= (part
of Emacs) to tangle them, i.e. send all the configs to the files they need to be in
for the programs to read them. One problem is that I can't just feed these files
to vanilla Emacs - I need to configure Emacs to be able to support tangle, which
is done in [[file:~/.haris/emacs.org][.haris/emacs.org]].

Here are the occasions when I want to tangle these config files:
- On a fresh OS install, where I have to tangle the files, without having Emacs
  configured prior
- On my main machine when I want to edit my configs and then apply them
  For this, I only need to load the =org-babel= package. Then, I have the
  =org-babel-tangle= function available, mapped to the =, b t= shortcut.
- As part of a CI workflow to have them available for download on GitHub

* Set up for use
- Custom scripts are located in [[~/.haris-bin][=~/.haris-bin/=]]. In order to have them available
  in your PATH, you must copy them over to =.local/bin/=:
  #+begin_src shell
    cp --link --interactive ~/.haris-bin/* ~/.local/bin/
  #+end_src
** Vim configuration
Install vim-plug:
#+begin_src shell :tangle (haris/tangle-deps "vim") :mkdirp yes
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  touch ~/.vimrc.tmp
#+end_src
After that, open vim and run =:PlugInstall=.
*** YouCompleteMe
After installing using vim-plug, go to the directory where YouCompleteMe is
located and run  =./setup.py --all=.
*** Dependencies
First complete the above steps.
#+begin_src shell :tangle (haris/tangle-deps "/vim") :mkdirp yes
  sudo pacman -S gvim neovim fzf
  rm -rf ~/.config/nvim/*/
  ln -sf -t ~/.config/nvim/ $(realpath ~/.vim/*/)
  touch ~/.vimrc.tmp ~/.config/nvim/init.tmp.vim
  # YouCompleteMe
  sudo pacman -S go nodejs npm jdk-openjdk
  echo "Run :PlugInstall to install plugins..." | vim
  cd ~/.vim/plugged/YouCompleteMe && python install.py --all
#+end_src
* X11
I store a couple of =.xinitrc= presets in my dotfiles, for different WMs, DEs
etc. So I can easily switch among them. They are named =~/.xinitrc-<identifier>=.
I switch among them using =xpreset <identifier>=. There is also the
=~/.xinitrc.common-x11= file which contains some common commands for all presets.
* Firefox
* Installing all dependencies
Each configuration file contains a list of dependencies for the program it
configures. These dependencies are conveniently placed in a shell source block
and can be exported using =(org-babel-tangle)=. The export destination is
=/tmp/dependencies-$USER/PROGRAM_NAME.sh=. The dependencies are installed by sourcing
these files in a POSIX-compliant shell, individually or in bulk.

In order to install all the dependencies, simply run
#+begin_src sh
  ./.mkdeps
#+end_src
** TODO Not yet implemented
This script will also take care of extracting the shell blocks from org files,
so you don't have to do anything except answer the package manager's prompts.

*NOTE:* The dependency scripts were made with *Arch Linux* in mind, so they use
=pacman= as the package manager and =paru= as an AUR helper.
* Notes and ideas
- Use tem to organize scripts (unless I decide to keep all scripts in an org
  file and just tangle them)
