#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle haris-config.el
#+begin_src emacs-lisp :exports none
  ;; -*- mode: emacs-lisp-mode; -*- vim: ft=lisp sw=2
#+end_src

*NOTE*: I use spacemacs.

* General settings
  #+begin_src emacs-lisp
    (setq fill-column 80)
    (setq default-tab-width 4)
    (setq custom-theme-directory "~/.emacs.d/private/themes")
    (setq browse-url-generic-program (executable-find "firefox"))
    
    (add-to-list 'exec-path (expand-file-name "~/.local/bin"))
    (if (not (boundp 'haris-prepended-path))
        (progn
          (setq haris-prepended-path "yes")
          (setenv "PATH" (concat (expand-file-name "~/.local/bin") ":" (getenv "PATH")))))
    
    ;; TODO whatever this does
    (add-hook 'text-mode-hook #'auto-fill-mode)
    (add-hook 'prog-mode-hook #'auto-fill-mode)
    
    ;; TODO needed only in spacemacs
    (disable-theme 'spacemacs-dark)
    (load-theme 'dracula t)
  #+end_src
** Bindings
   #+begin_src emacs-lisp
     ;; M-TAB in insert mode inserts a tab and converts it to a space
     (define-key evil-insert-state-map (kbd "M-TAB")
       '(lambda () (interactive)
          (insert "\t")
          (untabify
           (line-beginning-position)
           (line-end-position))))
     ;; M-TAB in normal mode switches windows
     (define-key evil-normal-state-map (kbd "M-TAB") 'other-window)
   #+end_src

*** Duplicating context in other applications
    #+begin_src emacs-lisp
      (global-set-key (kbd "M-t")
                      '(lambda () (interactive)
                         (start-process-shell-command "" nil "term")))
      (global-set-key
       (kbd "M-e")
       '(lambda () (interactive)
          (start-process "" nil
                         "emacs"
                         (buffer-file-name (window-buffer)))))
      (global-set-key
       (kbd "M-v")
       '(lambda () (interactive)
          (start-process-shell-command "" nil
                                       "gvim "
                                       (buffer-file-name (window-buffer)))))
    #+end_src
*** Spacemacs-like bindings
    #+begin_src emacs-lisp
      (define-key evil-normal-state-map
        (kbd "SPC f e h")
        '(lambda () (interactive)
           (find-file "~/.emacs.d/haris-config.org")))
      (define-key evil-normal-state-map
        (kbd "SPC f e r")
        '(lambda () (interactive)
           (load-file "~/.emacs.d/haris-config.el")))
    #+end_src

** Nerd commenter
   #+begin_src emacs-lisp
     (evilnc-default-hotkeys)
     (add-hook 'octave-mode-hook
               (lambda ()
                 (setq comment-start "% " comment-end "")))
     (define-key evil-normal-state-map (kbd "SPC c c") 'evilnc-copy-and-comment-lines)
   #+end_src
** Bindings
   #+begin_src emacs-lisp
     (define-key evil-normal-state-map (kbd "C-a")   'evil-numbers/inc-at-pt)
     (define-key evil-visual-state-map (kbd "C-a")   'evil-numbers/inc-at-pt)
     (define-key evil-normal-state-map (kbd "C-x")   'evil-numbers/dec-at-pt)
     (define-key evil-visual-state-map (kbd "C-x")   'evil-numbers/dec-at-pt)

     (define-key evil-normal-state-map (kbd "M-/")   '(lambda () (interactive)
                                                       (evil-ex-call-command "" "noh" "")))
   #+end_src
*** Consistent vim navigation
   #+begin_src emacs-lisp
     (define-key evil-visual-state-map (kbd "v")     'evil-visual-line)
     (define-key evil-normal-state-map (kbd "V")     (kbd "v$"))
   #+end_src
* Ivy
  #+begin_src emacs-lisp
    (setq ivy-initial-inputs-alist ())
  #+end_src
* Org mode
  #+begin_src emacs-lisp
    (require 'ob-shell)
    (require 'ob-C)
    (require 'ob-python)
    (require 'org-tempo)

    (setq 'org-indent-mode nil)
    (setq 'org-M-RET-may-split-line nil)
    (setq 'org-hide-emphasis-markers t)
    (setq org-file-apps
          (quote
           ((        . emacs)
            ("\\.x?html?\\'"  . "firefox %s"))))
  #+end_src
** Babel 
   #+begin_src emacs-lisp
     (org-babel-do-load-languages 'org-babel-load-languages
                                  '((shell    . t)
                                    (C        . t)
                                    (python   . t)))
   #+end_src
** LaTeX preview
  #+begin_src emacs-lisp
    (org-agenda-files '("~/data/personal/todo.org"))
    
    (setq org-preview-latex-default-process        'dvisvgm)
    (setq org-latex-create-formula-image-program   'dvisvgm)
    (setq org-preview-latex-image-directory        "/tmp/org-mode/ltximg/")
    (setq org-image-actual-width 400)
  #+end_src
** Bindings 
   #+begin_src emacs-lisp
     (evil-define-key 'normal org-mode-map (kbd "C-c e") 'visible-mode)
     (evil-define-key 'normal org-mode-map (kbd ",S")    'org-attach-screenshot)
   #+end_src
* ERC
  #+begin_src emacs-lisp
    (require 'erc)
    (setq erc-server "irc.libera.chat"
          erc-nick "veracioux"
          erc-user-full-name "Haris Gušić"
          erc-track-shorten-start 8
          erc-autojoin-channels-alist '((".*" "#archlinux" "#octave"))
          erc-kill-buffer-on-part t
          erc-auto-query 'bury)
    
    ;; For some reason erc-modules is undefined
    (add-to-list 'erc-modules 'notifications)
    (delete 'readonly erc-modules)
    (erc-services-mode 1)
    (erc-update-modules)
    
    (define-key evil-normal-state-map (kbd "SPC b j") 'erc-switch-to-buffer)
    (define-key erc-mode-map    (kbd "C-l") 'comint-clear-buffer)
    (erc-notify-mode t)
    (erc-notifications-mode t)
  #+end_src
* Octave mode
  #+begin_src emacs-lisp
    (defun octave-write-and-source () (interactive)
           (write-file (buffer-file-name))
           (octave-source-file (buffer-file-name)))
    
    (evil-define-key 'normal octave-mode-map
      (kbd ",ss") 'octave-write-and-source)
    (evil-define-key 'normal inferior-octave-mode-map
      (kbd ",hh") 'octave-help)
  #+end_src
* Comint
  #+begin_src emacs-lisp
    (defun comint-clear-buffer-goto () (interactive)
           (comint-clear-buffer) (evil-goto-line))
    (define-key comint-mode-map (kbd "C-l") 'comint-clear-buffer-goto)
  #+end_src
* EAF
** Dependencies
   #+begin_src shell :tangle /tmp/dependencies/emacs-eaf.sh
     sudo pacman -S git nodejs npm python-pyqt5 python-pyqt5-sip \
          python-pyqtwebengine wmctrl python-pymupdf
     paru -S python-epc
   #+end_src
* Vterm
  #+begin_src emacs-lisp
    (setq vterm-shell "/usr/bin/fish")
    (setq vterm-exit-functions 'delete-frame)
    
    (add-hook 'vterm-mode-hook (lambda () (read-only-mode -1)))
    
    (evil-define-key 'normal vterm-mode-map (kbd "A")   'evil-append-line)
    (evil-define-key 'normal vterm-mode-map (kbd "M-TAB") 'other-window)
  #+end_src
** TODO WTF?
   This doesn't work consistently.
   #+begin_src emacs-lisp
     ;; (define-key vterm-mode-map (kbd "C-l") 'vterm-clear-scrollback)
     ;; (define-key vterm-mode-map (kbd "C-l") 'erase-buffer)
     ;; (define-key vterm-mode-map (kbd "C-d") 'vterm-send-C-d)
   #+end_src
* TODO Mu4e 
 #+begin_src emacs-lisp
   (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
   ;;; Set up some common mu4e variables
   (setq mu4e-maildir "~/mail"
         mu4e-inbox-folder "/INBOX"
         mu4e-drafts-folder "/[Gmail].Drafts"
         mu4e-sent-folder "/[Gmail].Sent Mail"
         mu4e-refile-folder "/[Gmail].All Mail"
         mu4e-trash-folder "/[Gmail].Trash"
         mu4e-get-mail-command "mbsync -a"
         mu4e-update-interval nil
         mu4e-change-filenames-when-moving t
         mu4e-compose-signature-auto-include nil
         mu4e-view-show-images t
         mu4e-view-show-addresses t)
    
   ;;; Mail directory shortcuts
   (setq mu4e-maildir-shortcuts
         '(("/INBOX" . ?i)))
 #+end_src
* Programming languages 
** TODO C/C++
   #+begin_src emacs-lisp
     (setq-default
      dotspacemacs-configuration-layers
      '((c-c++ :variables c-c++-enable-clang-support t)))
     (setq c-default-style
           "bsd" c-basic-offset 4)
   #+end_src
** Python 
   #+begin_src emacs-lisp
     ;; (python :variables python-backend 'lsp python-lsp-server 'pylsp)
   #+end_src
* TODO Yasnippet
  #+begin_src emacs-lisp
    ;; Show snippets in auto-completion popup
    (setq-default dotspacemacs-configuration-layers
                  '((auto-completion :variables
                       auto-completion-enable-snippets-in-popup t)))
  #+end_src
* Maxima
  I used this mode like 2-3 times, but I'm keeping it in case I have to use it
  again.
  #+begin_src emacs-lisp
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/maxima/")
    (autoload 'maxima-mode "maxima" "Maxima mode" t)
    (autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
    (autoload 'maxima "maxima" "Maxima interaction" t)
    (autoload 'imath-mode "imath" "Imath mode for math formula input" t)
    (setq imaxima-use-maxima-mode-flag t)
    (add-to-list 'auto-mode-alist '("\\.ma[cx]\\'" . maxima-mode))
  #+end_src
* Info mode
  Remove Info mode annoying keybindings.
  #+begin_src emacs-lisp
    (define-key Info-mode-map   (kbd "l")   nil)
    (define-key Info-mode-map   (kbd "h")   nil)
  #+end_src
** TODO Fix bindings that were messed up by evil.
  #+begin_src emacs-lisp
    (evil-define-key 'motion-state Info-mode-map   (kbd "[ [")  'Info-prev)
    (evil-define-key 'motion-state Info-mode-map   (kbd "] ]")  'Info-next)
  #+end_src

